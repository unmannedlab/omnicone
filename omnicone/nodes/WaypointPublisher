#!/usr/bin/env python

import os 
import rospy
import rospkg
import math
import open_base
from geometry_msgs.msg import Twist, Pose2D, PoseStamped
from nav_msgs.msg import Path

from math import pi


class WaypointPublisher:

    def __init__(self):
        self.utm_home = (741616.44, 3391629.86)             # meters

        rospy.init_node('WaypointPublisher')

        # create the publisher
        self.path_pub  = rospy.Publisher('Waypoints' , Path, latch=True, queue_size=1)

        # filename = rospy.get_param('/WaypointFilePath')
        self.LoadWaypoints(os.path.join('..','paths', rospy.get_param('~Path')))


    def LoadWaypoints(self, filename):
        # Title
        # Description:
        #     Function does
        #     Appropriated from Amir Darwesh (2019)

        self.waypoints = Path()
        self.waypoints.header.stamp = rospy.Time.now()
        self.waypoints.header.frame_id = "world"
        cx,cy,cv = [], [], []

        rospack = rospkg.RosPack()
        with open( os.path.join(rospack.get_path('omnicone'),'scripts', filename) ) as f:
            for line in f:
                rx,ry,rv = map(float,line.split(','))
                cx.append(rx)
                cy.append(ry)
                cv.append(rv)

        for i in range(len(cx)):
            cpose = PoseStamped()
            cpose.header.stamp = rospy.Time.now()
            cpose.header.frame_id = "world"
            cpose.pose.position.x = cx[i] + self.utm_home[0]
            cpose.pose.position.y = cy[i] + self.utm_home[1]
            cpose.pose.position.z = cv[i]
            cpose.pose.orientation.x = 0
            cpose.pose.orientation.y = 0
            cpose.pose.orientation.z = 0
            cpose.pose.orientation.w = 1
            self.waypoints.poses.append(cpose)

    def run(self):

        rate = rospy.Rate(1) # 1 Hz

        while(not rospy.is_shutdown()):

            self.path_pub.publish(self.waypoints)
            rate.sleep()


if __name__ == '__main__':
    WayPub = WaypointPublisher()
    WayPub.run()
