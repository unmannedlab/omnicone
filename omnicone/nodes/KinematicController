#!/usr/bin/env python

import rospy
import math
from std_msgs.msg import Float64, Bool
from geometry_msgs.msg import Twist, Pose2D
from omnicone_msgs.msg import ConeState
from nav_msgs.msg import Path
from math import pi

class KinematicController:

    def __init__(self):
        # Kinematic Controller object initialization
        # Description:
        #     Function inializes the Kinematic Controller object. Subscribes
        #     to state and path and publsihes commands. Initializes persistent
        #     variables.

        rospy.init_node('KinematicController')

        # Paramters
        self.circumference = pi * 0.201                     # meters
        self.linear_to_rot = 2 * pi / self.circumference    # rad / m
        self.command_timeout = 2.5                          # sec

        # Create the command publishers
        self.left_pub  = rospy.Publisher('left_joint/command' , Float64, queue_size=10)
        self.back_pub  = rospy.Publisher('back_joint/command' , Float64, queue_size=10)
        self.right_pub = rospy.Publisher('right_joint/command', Float64, queue_size=10)
        self.Kine_pub  = rospy.Publisher('KControl/PathEnd'   , Bool,    queue_size=10)

        # Create the state and path subscribers
        self.state_sub = rospy.Subscriber('/EKF/state', Twist, self.updateVels)
        self.path_sub  = rospy.Subscriber('Waypoints',  Path,  self.updatePath)
        self.cone_state_sub  = rospy.Subscriber('/ConeState', ConeState, self.update_cone_state)

        # Initialize persistent variables
        self.cmd_vel = [0.0, 0.0, 0.0]
        self.last_cmd_time = rospy.get_time()
        self.Waypoints = Path()
        self.path_index = 1
        self.cone_mode = 0
        self.cone_status = ConeState()

        # Kinematic Controller Values
        self.K_err = 1
        self.K_theta = 0.4
        self.desired_speed = 0.75 # m/s


    def llh_to_xy(self, msg):
        
        a = 6378137.0
        b = 6356752.3142
        R = math.sqrt(( math.pow( math.pow(a,2) * math.cos(msg.y*pi/180), 2)+ \
                        math.pow( math.pow(b,2) * math.sin(msg.y*pi/180), 2))/ \
                       (math.pow( a * math.cos(msg.y*pi/180), 2)+ \
                        math.pow( b * math.sin(msg.y*pi/180), 2)))

        # Transform LLH to 2D position
        dlon = msg.x - self.cone_status.home.x   # degrees
        dlat = msg.y - self.cone_status.home.y   # degrees
        x_pos = R * math.radians(dlon)              # meters
        y_pos = R * math.radians(dlat)              # meters
        
        return x_pos, y_pos


    def update_cone_state(self,msg):
        if self.cone_status.mode == 0 and msg.mode == 1:
            self.path_end = False
        elif self.cone_status.mode == 2 and msg.mode == 3:
            self.path_end = False
        self.cone_status = msg


    def updatePath(self, msg):
        # Update Desired Path
        # Description:
        #     Function updates the internal desired path for the robot.
        #     If returning, reverses the direction of the path.
        if self.cone_status.mode == 3:
            self.Waypoints.poses = msg.poses[::-1]
        else:
            self.Waypoints = msg


    def updateVels(self, msg):
        # Update Command Velocities
        # Description:
        #     Function uses EKF state information and desired path to publish
        #     command velocities using a kinematic controller. The nearest point
        #     on the path is found and control and error velocities are
        #     controlled to that section of the path.

        if self.Waypoints:
            # Look for closest point and update global velocity goal
            dist_min = 10e9

            for i in range(max(0,self.path_index-2), \
                            min(self.path_index+8,len(self.Waypoints.poses)-1)):
                distance = math.sqrt((self.Waypoints.poses[i].pose.position.x - msg.linear.x)**2 + \
                                     (self.Waypoints.poses[i].pose.position.y - msg.linear.y)**2)
                if distance < dist_min:
                    dist_min = distance
                    self.path_index = i

            # P0 - Current state position
            x0 = msg.linear.x
            y0 = msg.linear.y
            # P1 - Closest path pose
            x1 = self.Waypoints.poses[self.path_index].pose.position.x
            y1 = self.Waypoints.poses[self.path_index].pose.position.y
            # P2 - Next path pose
            x2 = self.Waypoints.poses[self.path_index+1].pose.position.x
            y2 = self.Waypoints.poses[self.path_index+1].pose.position.y

            dT = float(msg.linear.z - 180)                       # degrees
            Vw = dT / max(abs(dT),30) * self.K_theta

            if self.path_index == len(self.Waypoints.poses)-2:
                # If closest to last point, control to final point and stop
                dx_world = x2 - x0
                dy_world = y2 - y0
                distance = math.sqrt(dx_world**2 + dy_world**2)
                if distance < 0.1:
                    self.path_end = True

                # Normalizes velocities to error from final point
                #   Ramps down speed when less than 1 m away
                Vx = -(dx_world * math.cos(math.radians(msg.linear.z)) -   \
                    dy_world * math.sin(math.radians(msg.linear.z))) /  \
                            max(distance,2) * self.desired_speed

                Vy = -(dx_world * math.sin(math.radians(msg.linear.z)) +   \
                    dy_world * math.cos(math.radians(msg.linear.z))) /  \
                            max(distance,2) * self.desired_speed

                # Transform to joint velocities using inverse kinematics
                resp = self.InverseKinematics(Vx,Vy,Vw)

                # Convert to rotational speeds
                self.cmd_vel[0] = -resp[0] * self.linear_to_rot
                self.cmd_vel[1] = -resp[1] * self.linear_to_rot
                self.cmd_vel[2] = -resp[2] * self.linear_to_rot

            else:
                self.path_end = False
                # Calculate Line equation between P1 and P2 in the form:
                #     a*x + b*y + c = 0
                a = y1 - y2
                b = x2 - x1
                c = -a*x1 - b*y1

                # P3 - Closest point to P0 on line betweeen P1 and P2
                x3 = (b*(b*x0-a*y0) - a*c) / (a**2 + b**2)
                y3 = (a*(a*y0-b*x0) - b*c) / (a**2 + b**2)

                # Desired path velocity
                dx_path = x2 - x1
                dy_path = y2 - y1

                # Normalized path velocity
                path_norm = math.sqrt( dx_path ** 2 + dy_path ** 2 )
                Vx_path = dx_path / path_norm * self.desired_speed
                Vy_path = dy_path / path_norm * self.desired_speed

                # Error velocity
                Vx_err  = self.K_err * (x3 - x0)
                Vy_err  = self.K_err * (y3 - y0)

                # Normalize desired and error correction velocities
                V_world  = math.sqrt((Vx_path + Vx_err)**2 + (Vy_path + Vy_err)**2)
                Vx_world = (Vx_path + Vx_err) / V_world * self.desired_speed
                Vy_world = (Vy_path + Vy_err) / V_world * self.desired_speed

                # Transform global control velocity to local control velocity
                Vx = -Vx_world * math.cos(math.radians(msg.linear.z)) + \
                    Vy_world * math.sin(math.radians(msg.linear.z))
                Vy = -Vx_world * math.sin(math.radians(msg.linear.z)) - \
                    Vy_world * math.cos(math.radians(msg.linear.z))

                # Transform to joint velocities using inverse kinematics
                resp = self.InverseKinematics(Vx,Vy,Vw)

                # Convert to rotational speeds
                self.cmd_vel[0] = -resp[0] * self.linear_to_rot
                self.cmd_vel[1] = -resp[1] * self.linear_to_rot
                self.cmd_vel[2] = -resp[2] * self.linear_to_rot

        self.last_cmd_time = rospy.get_time()


    def InverseKinematics(self,Vx,Vy,Vw):
        output = [0.0, 0.0, 0.0]
        R = 0.1905
        output[0] = -Vx*math.sin(math.radians(150)) + Vy*math.cos(math.radians(150)) + Vw * R # Left
        output[1] = -Vx*math.sin(math.radians(270)) + Vy*math.cos(math.radians(270)) + Vw * R # Back
        output[2] = -Vx*math.sin(math.radians( 30)) + Vy*math.cos(math.radians( 30)) + Vw * R # Right
        return output


    def run(self):
        # Kinematic Controller Publisher
        # Description:
        #     Function will continually publish control velocities regardless of
        #     EKF callback rate based on latest update. Will stop the robot if
        #     EKF topic is lost for more than 1 second. Publishes commands as
        #     individual joint commands.

        rate = rospy.Rate(10) # 10 Hz

        while(not rospy.is_shutdown()):
            if ( rospy.get_time() - self.last_cmd_time > self.command_timeout):
                self.cmd_vel = [0.0, 0.0, 0.0]

            elif (self.cone_status.mode == 1 \
                    or self.cone_status.mode == 3) and \
                    not self.cone_status.kill_switch and \
                    not self.cone_status.proximity_alarm:
                self.left_pub.publish( self.cmd_vel[0])
                self.back_pub.publish( self.cmd_vel[1])
                self.right_pub.publish(self.cmd_vel[2])
                self.Kine_pub.publish( self.path_end)

            rate.sleep()


if __name__ == '__main__':
    K_Control = KinematicController()
    K_Control.run()
