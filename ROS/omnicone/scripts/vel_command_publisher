#!/usr/bin/env python
import rospy
from math import pi
from std_msgs.msg import Float64
from geometry_msgs.msg import Pose2D
from open_base.srv import KinematicsInverse

class VelCommander:

    def __init__(self):
        rospy.init_node('vel_command_publisher')

        # create the publisher for each individual motor
        self.left_pub = rospy.Publisher('left_joint_velocity_controller/command', Float64, queue_size=10)
        self.back_pub = rospy.Publisher('back_joint_velocity_controller/command', Float64, queue_size=10)
        self.right_pub = rospy.Publisher('right_joint_velocity_controller/command', Float64, queue_size=10)

        # create the subscriber for the goal velocity
        self.goal_sub = rospy.Subscriber('/robot_vel_goal', Pose2D, self.updateVels)

        # create the caller to the inverse kinematics server
        self.ik_service_client = rospy.ServiceProxy('/kinematics_inverse_world', KinematicsInverse)

        self.vel_left = 0.0
        self.vel_back = 0.0
        self.vel_right = 0.0

        self.command_timeout = 1.0

        self.last_command = rospy.Time().now()

    def updateVels(self, goal):
        resp = self.ik_service_client(goal)

        linear_to_rpm = 1 / 0.0508 * 60 / (2 * pi)

        self.vel_left = -resp.output.v_left * linear_to_rpm
        self.vel_back = -resp.output.v_back * linear_to_rpm
        self.vel_right = -resp.output.v_right * linear_to_rpm

        self.last_command = rospy.Time.now()

    def run(self):
        rate = rospy.Rate(10) # 10 Hz
        timeout = rospy.Duration(self.command_timeout)

        while(not rospy.is_shutdown()):
            if (rospy.Time.now() - self.last_command > timeout):
                self.vel_left = 0.0
                self.vel_back = 0.0
                self.vel_right = 0.0

            self.left_pub.publish(self.vel_left)
            self.back_pub.publish(self.vel_back)
            self.right_pub.publish(self.vel_right)

            rate.sleep()


if __name__ == '__main__':
    vel_command_pub = VelCommander()
    vel_command_pub.run()
