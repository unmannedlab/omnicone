#!/usr/bin/env python

import os
import rospy
import rospkg
import math
import open_base

from geometry_msgs.msg import Twist, Pose2D, PoseStamped, Vector3
from nav_msgs.msg import Path

import numpy as np
from math import pi


class WaypointPublisher:

    def __init__(self):

        rospy.init_node('WaypointPublisher')

        self.home_init = False
        self.utm_home = (0, 0)

        self.home_sub = rospy.Subscriber('Cone_Command/home', Vector3, self.update_home)
        self.path_pub = rospy.Publisher('Waypoints' , Path, latch=True, queue_size=1)

        # filename = rospy.get_param('/WaypointFilePath')
        self.LoadWaypoints(os.path.join('paths', rospy.get_param('~Path')))


    def update_home(self, msg):
        self.utm_home = (msg.x, msg.y)
        self.home_init = True


    def LoadWaypoints(self, filename):
        # Title
        # Description:
        #     Function does
        #     Appropriated from Amir Darwesh (2019)

        self.waypoints = Path()
        self.waypoints.header.stamp = rospy.Time.now()
        self.waypoints.header.frame_id = "world"
        cx,cy,cv = [], [], []

        rospack = rospkg.RosPack()

        with open( os.path.join(rospack.get_path('omnicone'), filename) ) as f:
            for line in f:
                rx,ry,rv = map(float,line.split(','))
                cx.append(rx)
                cy.append(ry)
                cv.append(rv)

        R = np.array([np.cos(self.utm_home[2]),-np.sin(self.utm_home[2])], \
                    [ np.sin(self.utm_home[2]), np.cos(self.utm_home[2])])

        for i in range(len(cx)):
            b = np.matmul(R, np.array([[cx[i]],[cy[i]]]))
            cpose = PoseStamped()
            cpose.header.stamp = rospy.Time.now()
            cpose.header.frame_id = "world"
            cpose.pose.position.x = b[0] + self.utm_home[0]
            cpose.pose.position.y = b[1] + self.utm_home[1]
            cpose.pose.position.z = cv[i]
            cpose.pose.orientation.x = 0
            cpose.pose.orientation.y = 0
            cpose.pose.orientation.z = 0
            cpose.pose.orientation.w = 1
            self.waypoints.poses.append(cpose)

    def run(self):

        rate = rospy.Rate(1) # 1 Hz

        while(not rospy.is_shutdown()):
            if self.home_init:
                self.path_pub.publish(self.waypoints)

            rate.sleep()


if __name__ == '__main__':
    WayPub = WaypointPublisher()
    WayPub.run()
