#!/usr/bin/env python
import rospy
import gpxpy.geo
import math
from std_msgs.msg import String
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu
from sensor_msgs.msg import NavSatFix
from sensor_msgs.msg import Joy
from geometry_msgs.msg import PoseArray
from geometry_msgs.msg import Quaternion

class WaypointGen():

    def GpsCallback(self, data):
        #position = data.pose.pose.position
        position = Quaternion() #THIS IS USED IMPROPERLY ON PURPOSE
        position.x = data.latitude
        position.y = data.longitude
        position.z = self.speed
        if(self.stop):
            position.z = -1
        position.w = self.ang_speed
        #position = data
        #print position

        if len(self.points) < 1:
            print 'grabbed first position'
            print position
            self.points.append(position)
            self.xOff = position.x
            self.yOff = position.y
        if self.ang_speed > 0.05:
            self.wptDist = 1
        else :
            self.wptDist = 1
        if  (dist2D(self.points[-1],position) > self.wptDist):
            self.points.append(position)
            self.stop = 0

            #self.points.append(Point(position.x,position.y,position.z))

            rospy.logwarn('Added ' + str(position.x) + ' ' + str(position.y))
            # Write it to a file
            f = open(self.filename, 'w')
            for wpt in self.points:
                f.write(str(wpt.x) + ',' + str(wpt.y) + ',' + str(wpt.z) + ',' + str(wpt.w) + '\n')
            f.close()

    def JoyCallback(self, data):
        if bool(self.stop) == False:
            self.stop = data.buttons[7] #start button on the controller
            print 'the next waypoint will be a stop'

    def OdomCallback(self, data):
        self.speed = math.sqrt(math.pow(data.twist.twist.linear.x,2) + math.pow(data.twist.twist.linear.y,2))

    def ImuCallback(self, data):
        self.ang_speed = data.angular_velocity.z


    def __init__(self):
        self.speed = 0
        self.ang_speed = 0
        self.wptDist = rospy.get_param('~WaypointDistance', 3)
        print self.wptDist
        self.filename = rospy.get_param('~WaypointFile','waypoints.txt')
        print self.filename
        self.stop = 0
        rospy.Subscriber("/navsat/fix", NavSatFix, self.GpsCallback)
        rospy.Subscriber("/joy", Joy, self.JoyCallback)
        rospy.Subscriber("/navsat/odom", Odometry, self.OdomCallback)
        rospy.Subscriber("/imu/data", Imu, self.ImuCallback)
        self.wptPub = rospy.Publisher("~waypoints", PoseArray, latch=True, queue_size=1)
        self.points = []

        while not rospy.is_shutdown():
            rospy.sleep(1.0)

def dist2D(pt1, pt2):
    #print pt1
    #print pt2
    #return ((pt2.x - pt1.x)**2.0 + (pt2.y - pt1.y)**2.0)**(0.5)
    return gpxpy.geo.haversine_distance(pt1.x, pt1.y, pt2.x, pt2.y)

if __name__ == '__main__':
    rospy.init_node('wpgenerator')
    theNode = WaypointGen()
