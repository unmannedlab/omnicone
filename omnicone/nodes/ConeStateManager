#!/usr/bin/env python

# Modes:
#     0 - Initialization:
#         EKF waits for home position before publishing
#         Ends when EKF publishes first position estimate
#
#     1 - Deploy:
#         Following path
#         Listening to forward device
#         Stops if too close
#
#     2 - Idle:
#         Waiting for signal
#
#     3 - Return:
#         Follow path in reverse
#         Listening to forward device
#         Stops if too close
#
#     4 - Complete


import rospy
from math import sqrt
from std_msgs.msg import Bool, Int8
from omnicone_msgs.msg import ConeState
from geometry_msgs.msg import Twist, Pose2D, Vector3


class ConeStateManager:

    def __init__(self):

        self.cmd_timeout    = 2.5
        self.path_end       = False
        self.last_beat      = rospy.get_time()

        self.state          = ConeState(rospy.get_param('~Cone_number'), False,0, False, False, Pose2D(0,0,0) )

        rospy.init_node('ConeStateManager')
        self.state_pub      = rospy.Publisher('ConeState', ConeState, queue_size=10)

        self.kill_sub       = rospy.Subscriber('Cone_Command/kill', Bool,       self.update_kill_cmd)
        self.mode_sub       = rospy.Subscriber('Cone_Command/mode', Int8,       self.update_mode_cmd)
        self.home_sub       = rospy.Subscriber('Cone_Command/home', Vector3,    self.update_home_cmd)
        self.EKFstate_sub   = rospy.Subscriber('EKF/state',         Twist,      self.update_EKF_state)
        self.Kine_sub       = rospy.Subscriber('KControl/PathEnd',  Bool,       self.update_path_end)
        self.Other_cone_sub = rospy.Subscriber('recv/ConeState',    ConeState,  self.proximity_check)


    def proximity_check(self,msg):
        # Proximity Alarm
        # Description:
        #     Function check, if deploying or returning, if it will run into the
        #     next closest platform. If within 3 meters, platform in rear will stop.

        if self.state.mode == 1 and msg.mode == 1:
            if self.state.cone_num > msg.cone_num:
                dist = sqrt(   (self.state.pos.x - msg.pos.x)**2 + \
                               (self.state.pos.y - msg.pos.y)**2)
                if dist < 2:
                    self.state.proximity_alarm = True
                else:
                    self.state.proximity_alarm = False
            else:
                self.state.proximity_alarm = False
        elif self.state.mode == 3 and msg.mode == 3:
            if self.state.cone_num < msg.cone_num:
                dist = sqrt(   (self.state.pos.x - msg.pos.x)**2 + \
                               (self.state.pos.y - msg.pos.y)**2)
                if dist < 2:
                    self.state.proximity_alarm = True
                else:
                    self.state.proximity_alarm = False
            else:
                self.state.proximity_alarm = False


    def update_path_end(self, msg):
        self.path_end = msg.data


    def update_kill_cmd(self, msg):
        self.state.kill_switch  = msg.data
        self.last_beat          = rospy.get_time()


    def update_mode_cmd(self,msg):
        # State Machine
        # Description:
        #     Function checks the state machine conditions and advances
        #     the state when appropriate.

        if self.state.mode == 1:
            if msg.data == 3:
                self.state.mode = 3
            elif self.path_end:
                self.state.mode = 2

        elif self.state.mode == 2 and msg.data == 3:
            self.state.mode = 3
            self.path_end = False

        elif self.state.mode == 3 and self.path_end:
            self.state.mode = 4

    def update_home_cmd(self, msg): 
        self.state.mode = 1
        self.state.init = True
        

    def update_EKF_state(self,msg):
        self.state.pos = Pose2D(msg.linear.x, \
                                msg.linear.y, \
                                msg.linear.z)


    def run(self):
        rate = rospy.Rate(10) # 10 Hz

        while(not rospy.is_shutdown()):
            if ( rospy.get_time() - self.last_beat > self.cmd_timeout):
                self.state.kill_switch = True

            self.state_pub.publish(self.state)

            rate.sleep()


if __name__ == '__main__':
    Cone_Manager = ConeStateManager()
    Cone_Manager.run()

